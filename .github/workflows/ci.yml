name: CI/CD Pipeline

permissions:
  contents: read
  security-events: write

env:
  TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
  TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bigshot_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/setup.py', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        FLASK_ENV=testing
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/bigshot_test
        REDIS_URL=redis://localhost:6379/0
        SECRET_KEY=test-secret-key
        JWT_SECRET_KEY=test-jwt-secret
        CELERY_BROKER_URL=redis://localhost:6379/0
        CELERY_RESULT_BACKEND=redis://localhost:6379/0
        EOF

    - name: Run code formatting check
      run: |
        python -m black --check app/ tests/ *.py || echo "Code formatting issues found"

    - name: Run linting
      run: |
        python -m flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

  

  frontend-tests:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run linting
      working-directory: frontend
      run: npm run lint

    - name: Run type checking
      working-directory: frontend
      run: npx tsc --noEmit

    - name: Run tests
      working-directory: frontend
      run: npm run test:coverage

    - name: Build frontend
      working-directory: frontend
      run: npm run build

  integration-tests:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bigshot_test
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      working-directory: frontend
      run: npm ci

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Run integration tests if present
      env:
        FLASK_ENV: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bigshot_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        echo "üîç Checking for integration tests..."
        set +e  # Allow commands to fail without exiting
        COLLECT_OUTPUT=$(python -m pytest tests/ -k "integration" --collect-only 2>&1)
        COLLECT_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        echo "üìä Test collection output:"
        echo "$COLLECT_OUTPUT"
        
        if echo "$COLLECT_OUTPUT" | grep -q -E '(collected 0 items|no tests collected)'; then
          echo "‚úÖ No integration tests found. Skipping integration test execution."
          exit 0
        elif [ $COLLECT_EXIT_CODE -eq 5 ]; then
          echo "‚úÖ No integration tests found (pytest exit code 5). Skipping integration test execution."
          exit 0
        elif [ $COLLECT_EXIT_CODE -ne 0 ]; then
          echo "‚ùå Failed to collect integration tests (exit code: $COLLECT_EXIT_CODE)"
          echo "$COLLECT_OUTPUT"
          exit 1
        else
          echo "üöÄ Running integration tests..."
          python -m pytest tests/ -v -k "integration" --tb=short || (echo "‚ùå Integration tests failed"; exit 1)
        fi

  performance-tests:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [backend-tests]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bigshot_test
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        FLASK_ENV=testing
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/bigshot_test
        REDIS_URL=redis://localhost:6379/0
        SECRET_KEY=test-secret-key
        JWT_SECRET_KEY=test-jwt-secret
        CELERY_BROKER_URL=redis://localhost:6379/0
        CELERY_RESULT_BACKEND=redis://localhost:6379/0
        EOF

    - name: Run performance tests if present
      env:
        FLASK_ENV: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bigshot_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        echo "üîç Checking for performance tests..."
        set +e  # Allow commands to fail without exiting
        COLLECT_OUTPUT=$(python -m pytest tests/ -k "performance" --collect-only 2>&1)
        COLLECT_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        echo "üìä Test collection output:"
        echo "$COLLECT_OUTPUT"
        
        if echo "$COLLECT_OUTPUT" | grep -q -E '(collected 0 items|no tests collected)'; then
          echo "‚úÖ No performance tests found. Skipping performance test execution."
          exit 0
        elif [ $COLLECT_EXIT_CODE -eq 5 ]; then
          echo "‚úÖ No performance tests found (pytest exit code 5). Skipping performance test execution."
          exit 0
        elif [ $COLLECT_EXIT_CODE -ne 0 ]; then
          echo "‚ùå Failed to collect performance tests (exit code: $COLLECT_EXIT_CODE)"
          echo "$COLLECT_OUTPUT"
          exit 1
        else
          echo "üöÄ Running performance tests..."
          python -m pytest tests/ -v -k "performance" --tb=short || (echo "‚ùå Performance tests failed"; exit 1)
        fi


