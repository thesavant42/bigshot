name: CI/CD Pipeline

permissions:
  contents: read
  security-events: write

env:
  TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
  TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bigshot_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        FLASK_ENV=testing
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/bigshot_test
        REDIS_URL=redis://localhost:6379/0
        SECRET_KEY=test-secret-key
        JWT_SECRET_KEY=test-jwt-secret
        CELERY_BROKER_URL=redis://localhost:6379/0
        CELERY_RESULT_BACKEND=redis://localhost:6379/0
        EOF
    
    - name: Run code formatting check
      run: |
        python -m black --check app/ tests/ *.py || echo "Code formatting issues found"
    
    - name: Run linting
      run: |
        python -m flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run tests with coverage
      env:
        FLASK_ENV: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bigshot_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run linting
      working-directory: frontend
      run: npm run lint
    
    - name: Run type checking
      working-directory: frontend
      run: npx tsc --noEmit
    
    - name: Run tests
      working-directory: frontend
      env:
        NODE_ENV: test
        TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
        TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      run: npm test -- --run --coverage
    
    - name: Build frontend
      working-directory: frontend
      run: npm run build

  # ui-health-tests:
  #   runs-on: ubuntu-latest
  #   needs: [frontend-tests]
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '20'
  #       cache: 'npm'
  #       cache-dependency-path: frontend/package-lock.json
  #   
  #   - name: Install dependencies
  #     working-directory: frontend
  #     run: npm ci
  #   
  #   - name: Install Playwright browsers
  #     working-directory: frontend
  #     run: npx playwright install --with-deps
  #   
  #   - name: Run UI health tests
  #     working-directory: frontend
  #     env:
  #       CI: true
  #       TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
  #       TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
  #       PLAYWRIGHT_BASE_URL: http://localhost:3000
  #     run: npm run test:e2e || echo "No UI health tests found"

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bigshot_test
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: frontend
      run: npm run build
    
    - name: Run integration tests
      env:
        FLASK_ENV: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bigshot_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m pytest tests/ -v -k "integration" --tb=short || echo "No integration tests found"



  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bigshot_test
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance tests
      env:
        FLASK_ENV: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bigshot_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m pytest tests/ -v -k "performance" --tb=short || echo "No performance tests found"

  ui-health-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    env:
      TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start application services
      run: |
        echo "TEST_USERNAME=$TEST_USERNAME" > .env
        echo "TEST_PASSWORD=$TEST_PASSWORD" >> .env
        docker compose -f docker-compose.test.yml up -d --build
        echo "Waiting for services to be ready..."
        sleep 30
        
        # Show service status
        docker compose -f docker-compose.test.yml ps
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Install Playwright Browsers
      working-directory: frontend
      run: npx playwright install --with-deps chromium
    
    - name: Wait for application to be ready
      run: |
        echo "Waiting for frontend to be accessible..."
        timeout 180 bash -c '
          until curl -f http://localhost:80 > /dev/null 2>&1; do
            echo "Waiting for frontend..."
            sleep 5
          done
        '
        
        echo "Waiting for backend API to be ready..."
        timeout 180 bash -c '
          until curl -f http://localhost:5000/api/v1/health > /dev/null 2>&1; do
            echo "Waiting for backend API..."
            sleep 5
          done
        '
        
        echo "✅ Application is ready for testing"
    
    - name: Run UI health tests
      working-directory: frontend
      run: |
        # Update Playwright config for CI environment
        export PLAYWRIGHT_BASE_URL=http://localhost:80
        npm run test:e2e
      env:
        CI: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/
        retention-days: 30
    
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-screenshots
        path: frontend/test-results/*.png
        retention-days: 30
    
    - name: Analyze screenshot health
      if: always()
      run: |
        echo "📊 Analyzing UI health test results..."
        
        # Check if dashboard screenshot exists and analyze it
        SCREENSHOT_PATH="frontend/test-results/dashboard-health.png"
        if [ -f "$SCREENSHOT_PATH" ]; then
          SIZE=$(stat -c%s "$SCREENSHOT_PATH" 2>/dev/null || stat -f%z "$SCREENSHOT_PATH" 2>/dev/null || echo "0")
          echo "Dashboard screenshot size: ${SIZE} bytes"
          
          if [ "$SIZE" -gt 30000 ]; then
            echo "✅ Dashboard screenshot appears healthy (size: ${SIZE} bytes)"
            echo "SCREENSHOT_HEALTHY=true" >> $GITHUB_ENV
          else
            echo "❌ Dashboard screenshot too small - likely blank or corrupted (size: ${SIZE} bytes)"
            echo "SCREENSHOT_HEALTHY=false" >> $GITHUB_ENV
            exit 1
          fi
        else
          echo "❌ Dashboard screenshot not found"
          echo "SCREENSHOT_HEALTHY=false" >> $GITHUB_ENV
          exit 1
        fi
    
    - name: Stop services
      if: always()
      run: |
        docker compose -f docker-compose.test.yml logs
        docker compose -f docker-compose.test.yml down -v
